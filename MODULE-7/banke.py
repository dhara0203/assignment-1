# -*- coding: utf-8 -*-
"""banke.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EpseQ80aPnEcT8sqALZ27sHKjryo1A2N
"""

data = pd.read_csv('BankChurners.csv')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print(data.head())

print(data.info())

print(data.describe())

categorical_features = data.select_dtypes(include=['object']).columns
numerical_features = data.select_dtypes(include=['int64','float64']).columns
print("\nCategorical Features:", categorical_features)
print("Numerical Features:", numerical_features)

for col in categorical_features:
    print(f"\nValue counts for {col}:")
    print(data[col].value_counts())

corr_matrix = data[numerical_features].corr()
plt.figure(figsize=(12,8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

data[numerical_features].hist(bins=20, figsize=(15,10))
plt.suptitle('Numerical Feature Distributions')
plt.show()

for col in categorical_features:
    plt.figure(figsize=(6,4))
    sns.countplot(data=data, x=col)
    plt.title(f'Count Plot of {col}')
    plt.xticks(rotation=45)
    plt.show()

data['Attrition_Flag'] = data['Attrition_Flag'].apply(lambda x: 1 if x=='Attrited Customer' else 0)

X = data.drop('Attrition_Flag', axis=1)
y = data['Attrition_Flag']

X = pd.get_dummies(X, drop_first=True)

print("Class distribution:\n", y.value_counts())

imbalance_ratio = y.value_counts()[0] / y.value_counts()[1]
print(f"Imbalance ratio: {imbalance_ratio:.2f}")

if imbalance_ratio > 1.5:  # Threshold can be adjusted
    smote = SMOTE(random_state=42)
    X, y = smote.fit_resample(X, y)
    print("After SMOTE, class distribution:\n", pd.Series(y).value_counts())

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = LogisticRegression(random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

data['Attrition_Flag'] = data['Attrition_Flag'].apply(lambda x: 1 if x=='Churned' else 0)

X = data.drop('Attrition_Flag', axis=1)
y = data['Attrition_Flag']

X = pd.get_dummies(X, drop_first=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
y_pred_nb = nb_model.predict(X_test)
print("Naive Bayes Performance:")
print(classification_report(y_test, y_pred_nb))
print(confusion_matrix(y_test, y_pred_nb))

knn_model = KNeighborsClassifier()
knn_model.fit(X_train_scaled, y_train)
y_pred_knn = knn_model.predict(X_test_scaled)
print("\nK-Nearest Neighbors Performance:")
print(classification_report(y_test, y_pred_knn))
print(confusion_matrix(y_test, y_pred_knn))

dt_params = {
    'max_depth': [3, 5, 7, 10, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 5]
}

dt_grid = GridSearchCV(DecisionTreeClassifier(random_state=42), dt_params, cv=5, scoring='accuracy')
dt_grid.fit(X_train, y_train)

dt_best = dt_grid.best_estimator_
y_pred_dt = dt_best.predict(X_test)

rf_params = {
    'n_estimators': [100, 200, 300, 500],
    'max_depth': [None, 5, 10, 15],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'max_features': ['auto', 'sqrt', 'log2']
}

rf_random = RandomizedSearchCV(RandomForestClassifier(random_state=42), rf_params,
                               n_iter=20, cv=5, scoring='accuracy', random_state=42)
rf_random.fit(X_train, y_train)

rf_best = rf_random.best_estimator_
y_pred_rf = rf_best.predict(X_test)

models = {
    'Decision Tree': (y_pred_dt, dt_best),
    'Random Forest': (y_pred_rf, rf_best)
}

for name, (y_pred, model) in models.items():
    print(f"\n{name} Performance:")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred))
    print("Best Parameters:", model.get_params())